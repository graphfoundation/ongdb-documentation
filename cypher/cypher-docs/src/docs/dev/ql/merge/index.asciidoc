[[query-merge]]
= MERGE


[abstract]
The `MERGE` clause ensures that a pattern exists in the graph.
Either the pattern already exists, or it needs to be created.

* <<query-merge-introduction, Introduction>>
* <<query-merge-node-derived, Merge nodes>>
 ** <<merge-merge-single-node-with-a-label, Merge single node with a label>>
 ** <<merge-merge-single-node-with-properties, Merge single node with properties>>
 ** <<merge-merge-single-node-specifying-both-label-and-property, Merge single node specifying both label and property>>
 ** <<merge-merge-single-node-derived-from-an-existing-node-property, Merge single node derived from an existing node property>>
* <<query-merge-on-create-on-match, Use `ON CREATE` and `ON MATCH`>>
 ** <<merge-merge-with-on-create, Merge with `ON CREATE`>>
 ** <<merge-merge-with-on-match, Merge with `ON MATCH`>>
 ** <<merge-merge-with-on-create-and-on-match, Merge with `ON CREATE` and `ON MATCH`>>
 ** <<merge-merge-with-on-match-setting-multiple-properties, Merge with `ON MATCH` setting multiple properties>>
* <<query-merge-relationships, Merge relationships>>
 ** <<merge-merge-on-a-relationship, Merge on a relationship>>
 ** <<merge-merge-on-multiple-relationships, Merge on multiple relationships>>
 ** <<merge-merge-on-an-undirected-relationship, Merge on an undirected relationship>>
 ** <<merge-merge-on-a-relationship-between-two-existing-nodes, Merge on a relationship between two existing nodes>>
 ** <<merge-merge-on-a-relationship-between-an-existing-node-and-a-merged-node-derived-from-a-node-property, Merge on a relationship between an existing node and a merged node derived from a node property>>
* <<query-merge-using-unique-constraints, Using unique constraints with `MERGE`>>
 ** <<merge-merge-using-unique-constraints-creates-a-new-node-if-no-node-is-found, Merge using unique constraints creates a new node if no node is found>>
 ** <<merge-merge-using-unique-constraints-matches-an-existing-node, Merge using unique constraints matches an existing node>>
 ** <<merge-merge-with-unique-constraints-and-partial-matches, Merge with unique constraints and partial matches>>
 ** <<merge-merge-with-unique-constraints-and-conflicting-matches, Merge with unique constraints and conflicting matches>>
* <<merge-using-map-parameters-with-merge, Using map parameters with `MERGE`>>


[[query-merge-introduction]]
== Introduction

`MERGE` either matches existing nodes and binds them, or it creates new data and binds that.
It's like a combination of `MATCH` and `CREATE` that additionally allows you to specify what happens if the data was matched or created.

For example, you can specify that the graph must contain a node for a user with a certain name.
If there isn't a node with the correct name, a new node will be created and its name property set.

[NOTE]
For performance reasons, creating a schema index on the label and property is highly recommended when using `MERGE`.
See <<administration-indexes-search-performance>> for more information.

When using `MERGE` on full patterns, the behavior is that either the whole pattern matches, or the whole pattern is created.
`MERGE` will not partially use existing patterns -- it's all or nothing.
If partial matches are needed, this can be accomplished by splitting a pattern up into multiple `MERGE` clauses.

As with `MATCH`, `MERGE` can match multiple occurrences of a pattern.
If there are multiple matches, they will all be passed on to later stages of the query.

The last part of `MERGE` is the `ON CREATE` and `ON MATCH`.
These allow a query to express additional changes to the properties of a node or relationship, depending on if the element was `MATCH` -ed in the database or if it was `CREATE` -ed.

The following graph is used for the examples below:

.Graph
include::includes/cypher-merge-graph.asciidoc[]


[[query-merge-node-derived]]
== Merge nodes

include::merge-single-node-with-a-label.asciidoc[leveloffset=+1]

include::merge-single-node-with-properties.asciidoc[leveloffset=+1]

include::merge-single-node-specifying-both-label-and-property.asciidoc[leveloffset=+1]

include::merge-single-node-derived-from-an-existing-node-property.asciidoc[leveloffset=+1]


[[query-merge-on-create-on-match]]
== Use `ON CREATE` and `ON MATCH`

include::merge-with-on-create.asciidoc[leveloffset=+1]

include::merge-with-on-match.asciidoc[leveloffset=+1]

include::merge-with-on-create-and-on-match.asciidoc[leveloffset=+1]

include::merge-with-on-match-setting-multiple-properties.asciidoc[leveloffset=+1]


[[query-merge-relationships]]
== Merge relationships

include::merge-on-a-relationship.asciidoc[leveloffset=+1]

include::merge-on-multiple-relationships.asciidoc[leveloffset=+1]

include::merge-on-an-undirected-relationship.asciidoc[leveloffset=+1]

include::merge-on-a-relationship-between-two-existing-nodes.asciidoc[leveloffset=+1]

include::merge-on-a-relationship-between-an-existing-node-and-a-merged-node-derived-from-a-node-property.asciidoc[leveloffset=+1]


[[query-merge-using-unique-constraints]]
== Using unique constraints with `MERGE`

Cypher prevents getting conflicting results from `MERGE` when using patterns that involve unique constraints.
In this case, there must be at most one node that matches that pattern.

For example, given two unique constraints on `:Person(id)` and `:Person(ssn)`, a query such as `MERGE (n:Person {id: 12, ssn: 437})` will fail, if there are two different nodes (one with `id` 12 and one with `ssn` 437) or if there is only one node with only one of the properties.
In other words, there must be exactly one node that matches the pattern, or no matching nodes.

Note that the following examples assume the existence of unique constraints that have been created using:

include::includes/merge-setup-constraints.asciidoc[]

include::merge-using-unique-constraints-creates-a-new-node-if-no-node-is-found.asciidoc[leveloffset=+1]

include::merge-using-unique-constraints-matches-an-existing-node.asciidoc[leveloffset=+1]

include::merge-with-unique-constraints-and-partial-matches.asciidoc[leveloffset=+1]

include::merge-with-unique-constraints-and-conflicting-matches.asciidoc[leveloffset=+1]

include::using-map-parameters-with-merge.asciidoc[]
